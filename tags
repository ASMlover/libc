!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLOC	.\inc\memory.h	41;"	d	language:C++
ARENA_ALLOC	.\inc\arena.h	44;"	d	language:C++
ARENA_CALLOC	.\inc\arena.h	45;"	d	language:C++
CALLOC	.\inc\memory.h	42;"	d	language:C++
COUNTOF	.\inc\config.h	36;"	d	language:C++
ELSE	.\inc\except.h	108;"	d	language:C++
ELSE	.\inc\except.h	74;"	d	language:C++
END_TRY	.\inc\except.h	119;"	d	language:C++
END_TRY	.\inc\except.h	85;"	d	language:C++
ERROR_LEN	.\inc\config.h	38;"	d	language:C++
EXCEPT	.\inc\except.h	103;"	d	language:C++
EXCEPT	.\inc\except.h	69;"	d	language:C++
EXCEPT_ENTERED	.\inc\except.h	/^  EXCEPT_ENTERED    = 0, $/;"	e	language:C++	enum:__anon1
EXCEPT_FINALIZED	.\inc\except.h	/^  EXCEPT_FINALIZED  = 3, $/;"	e	language:C++	enum:__anon1
EXCEPT_HANDLED	.\inc\except.h	/^  EXCEPT_HANDLED    = 2, $/;"	e	language:C++	enum:__anon1
EXCEPT_RAISED	.\inc\except.h	/^  EXCEPT_RAISED     = 1, $/;"	e	language:C++	enum:__anon1
EXISTS_NO	.\inc\config.h	/^  EXISTS_NO   = 0, $/;"	e	language:C++	enum:EXISTS_TYPE
EXISTS_TYPE	.\inc\config.h	/^enum EXISTS_TYPE {$/;"	g	language:C++
EXISTS_YES	.\inc\config.h	/^  EXISTS_YES  = 1, $/;"	e	language:C++	enum:EXISTS_TYPE
ErrorCode	.\inc\error.h	/^enum ErrorCode {$/;"	g	language:C++
Error_DividendIsZero	.\inc\error.h	/^  Error_DividendIsZero  = 1, $/;"	e	language:C++	enum:ErrorCode
Error_Unknown	.\inc\error.h	/^  Error_Unknown         = 0, $/;"	e	language:C++	enum:ErrorCode
FINALLY	.\inc\except.h	113;"	d	language:C++
FINALLY	.\inc\except.h	79;"	d	language:C++
FREE	.\inc\memory.h	45;"	d	language:C++
IS_CLOSE2ZERO	.\src\arith.c	33;"	d	language:C	file:
LDESCRIPTORS	.\src\mem_check.c	54;"	d	language:C	file:
LHASH	.\src\mem_check.c	53;"	d	language:C	file:
LHASHTABLE_LEN_DEF	.\src\mem_check.c	52;"	d	language:C	file:
LNALLOC	.\src\mem_check.c	55;"	d	language:C	file:
LSEQUENCE_LEN_DEF	.\src\sequence.c	39;"	d	language:C	file:
LTHRESHOLD	.\src\arena.c	36;"	d	language:C	file:
MEM_ALLOC	.\inc\mem_check.h	41;"	d	language:C++
MEM_CALLOC	.\inc\mem_check.h	42;"	d	language:C++
MEM_FREE	.\inc\mem_check.h	43;"	d	language:C++
MEM_REALLOC	.\inc\mem_check.h	44;"	d	language:C++
NELEMS	.\src\atom.c	39;"	d	language:C	file:
NEW	.\inc\memory.h	43;"	d	language:C++
NEW0	.\inc\memory.h	44;"	d	language:C++
RAISE	.\inc\except.h	58;"	d	language:C++
RAISE	.\inc\except.h	93;"	d	language:C++
REALLOC	.\inc\memory.h	46;"	d	language:C++
RERAISE	.\inc\except.h	59;"	d	language:C++
RERAISE	.\inc\except.h	94;"	d	language:C++
RESULT_FAIL	.\inc\config.h	/^  RESULT_FAIL = 1, $/;"	e	language:C++	enum:RESULT_TYPE
RESULT_OK	.\inc\config.h	/^  RESULT_OK   = 0, $/;"	e	language:C++	enum:RESULT_TYPE
RESULT_TYPE	.\inc\config.h	/^enum RESULT_TYPE {$/;"	g	language:C++
RETURN	.\inc\except.h	60;"	d	language:C++
RETURN	.\inc\except.h	95;"	d	language:C++
TRY	.\inc\except.h	61;"	d	language:C++
TRY	.\inc\except.h	96;"	d	language:C++
TestArena	.\test\test_arena.c	/^} TestArena;$/;"	t	language:C	typeref:struct:_TestArena	file:
TestFunc	.\test\test.c	/^struct TestFunc {$/;"	s	language:C	file:
TestMemCheck	.\test\test_memcheck.c	/^} TestMemCheck;$/;"	t	language:C	typeref:struct:_TestMemCheck	file:
TestMemory	.\test\test_memory.c	/^} TestMemory;$/;"	t	language:C	typeref:struct:_TestMemory	file:
_CRT_WIDE	.\src\except.c	83;"	d	language:C	file:
_TestArena	.\test\test_arena.c	/^typedef struct _TestArena {$/;"	s	language:C	file:
_TestMemCheck	.\test\test_memcheck.c	/^typedef struct _TestMemCheck {$/;"	s	language:C	file:
_TestMemory	.\test\test_memory.c	/^typedef struct _TestMemory {$/;"	s	language:C	file:
__ARENA_HEADER_H__	.\inc\arena.h	30;"	d	language:C++
__ARITH_HEADER_H__	.\inc\arith.h	30;"	d	language:C++
__ARRAY_HEADER_H__	.\inc\array.h	30;"	d	language:C++
__ASSERT_HEADER_H__	.\inc\assert.h	30;"	d	language:C++
__ATOM_HEADER_H__	.\inc\atom.h	30;"	d	language:C++
__CONFIG_HEADER_H__	.\inc\config.h	30;"	d	language:C++
__CRT_WIDE	.\src\except.c	82;"	d	language:C	file:
__ERROR_HEADER_H__	.\inc\error.h	30;"	d	language:C++
__EXCEPT_HEADER_H__	.\inc\except.h	30;"	d	language:C++
__LIST_HEADER_H__	.\inc\list.h	30;"	d	language:C++
__MEMORY_CHECK_HEADER_H__	.\inc\mem_check.h	30;"	d	language:C++
__MEMORY_HEADER_H__	.\inc\memory.h	30;"	d	language:C++
__SEQUENCE_HEADER_H__	.\inc\sequence.h	30;"	d	language:C++
__SET_HEADER_H__	.\inc\set.h	30;"	d	language:C++
__SLIST_HEADER_H__	.\inc\slist.h	30;"	d	language:C++
__STACK_HEADER_H__	.\inc\stack.h	30;"	d	language:C++
__TABLE_HEADER_H__	.\inc\table.h	30;"	d	language:C++
__TEST_HEADER_H__	.\test\test.h	30;"	d	language:C++
__func__	.\inc\error.h	33;"	d	language:C++
__func__	.\test\test.h	33;"	d	language:C++
_assert	.\src\except.c	/^    _CRTIMP void __cdecl _assert(const char*, const char*, unsigned int);$/;"	p	language:C	file:	signature:(const char*, const char*, unsigned int)
_error	.\inc\error.h	/^extern void _error(const char* file, const char* func, int line, int err_code);$/;"	p	language:C++	signature:(const char* file, const char* func, int line, int err_code)
_error	.\src\error.c	/^void _error(const char* file, const char* func, int line, int err_code)$/;"	f	language:C	signature:(const char* file, const char* func, int line, int err_code)
_wassert	.\src\except.c	/^    _CRTIMP void __cdecl _wassert(const wchar_t*, const wchar_t*, unsigned int);$/;"	p	language:C	file:	signature:(const wchar_t*, const wchar_t*, unsigned int)
align	.\src\arena.c	/^  union lAlign  align;$/;"	m	language:C	union:lHeader	typeref:union:lHeader::lAlign	file:
arena	.\src\arena.c	/^  struct lArena arena;$/;"	m	language:C	union:lHeader	typeref:struct:lHeader::lArena	file:
arena_alloc	.\inc\arena.h	/^extern void* arena_alloc(int arena, long bytes, const char* file, int line);$/;"	p	language:C++	signature:(int arena, long bytes, const char* file, int line)
arena_alloc	.\src\arena.c	/^void* arena_alloc(int arena, long bytes, const char* file, int line)$/;"	f	language:C	signature:(int arena, long bytes, const char* file, int line)
arena_calloc	.\inc\arena.h	/^extern void* arena_calloc(int arena, long count, long elem_bytes, const char* file, int line);$/;"	p	language:C++	signature:(int arena, long count, long elem_bytes, const char* file, int line)
arena_calloc	.\src\arena.c	/^void* arena_calloc(int arena, long count, long elem_bytes, const char* file, int line)$/;"	f	language:C	signature:(int arena, long count, long elem_bytes, const char* file, int line)
arena_create	.\inc\arena.h	/^extern int arena_create(void);$/;"	p	language:C++	signature:(void)
arena_create	.\src\arena.c	/^int arena_create(void)$/;"	f	language:C	signature:(void)
arena_free	.\inc\arena.h	/^extern void arena_free(int arena);$/;"	p	language:C++	signature:(int arena)
arena_free	.\src\arena.c	/^void arena_free(int arena)$/;"	f	language:C	signature:(int arena)
arena_release	.\inc\arena.h	/^extern void arena_release(int* arena);$/;"	p	language:C++	signature:(int* arena)
arena_release	.\src\arena.c	/^void arena_release(int* arena)$/;"	f	language:C	signature:(int* arena)
arith_ceiling	.\inc\arith.h	/^extern int arith_ceiling(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_ceiling	.\src\arith.c	/^int arith_ceiling(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_div	.\inc\arith.h	/^extern int arith_div(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_div	.\src\arith.c	/^int arith_div(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_floor	.\inc\arith.h	/^extern int arith_floor(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_floor	.\src\arith.c	/^int arith_floor(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_max	.\inc\arith.h	/^extern int arith_max(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_max	.\src\arith.c	/^int arith_max(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_min	.\inc\arith.h	/^extern int arith_min(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_min	.\src\arith.c	/^int arith_min(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_mod	.\inc\arith.h	/^extern int arith_mod(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_mod	.\src\arith.c	/^int arith_mod(int x, int y)$/;"	f	language:C	signature:(int x, int y)
array_back	.\inc\array.h	/^extern void* array_back(void* A);$/;"	p	language:C++	signature:(void* A)
array_back	.\src\array.c	/^void* array_back(void* A)$/;"	f	language:C	signature:(void* A)
array_begin	.\inc\array.h	/^extern lArrayIter array_begin(void* A);$/;"	p	language:C++	signature:(void* A)
array_begin	.\src\array.c	/^lArrayIter array_begin(void* A)$/;"	f	language:C	signature:(void* A)
array_clear	.\inc\array.h	/^extern void array_clear(void* A);$/;"	p	language:C++	signature:(void* A)
array_clear	.\src\array.c	/^void array_clear(void* A)$/;"	f	language:C	signature:(void* A)
array_copy	.\inc\array.h	/^extern void* array_copy(void* A, int copy_len);$/;"	p	language:C++	signature:(void* A, int copy_len)
array_copy	.\src\array.c	/^void* array_copy(void* A, int copy_len)$/;"	f	language:C	signature:(void* A, int copy_len)
array_create	.\inc\array.h	/^extern void* array_create(int storage);$/;"	p	language:C++	signature:(int storage)
array_create	.\src\array.c	/^void* array_create(int storage)$/;"	f	language:C	signature:(int storage)
array_element_destroy	.\test\test_array.c	/^static void array_element_destroy(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
array_element_display	.\test\test_array.c	/^static void array_element_display(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
array_empty	.\inc\array.h	/^extern int array_empty(void* A);$/;"	p	language:C++	signature:(void* A)
array_empty	.\src\array.c	/^int array_empty(void* A)$/;"	f	language:C	signature:(void* A)
array_end	.\inc\array.h	/^extern lArrayIter array_end(void* A);$/;"	p	language:C++	signature:(void* A)
array_end	.\src\array.c	/^lArrayIter array_end(void* A)$/;"	f	language:C	signature:(void* A)
array_erase	.\inc\array.h	/^extern void* array_erase(void* A, lArrayIter pos);$/;"	p	language:C++	signature:(void* A, lArrayIter pos)
array_erase	.\src\array.c	/^void* array_erase(void* A, lArrayIter pos)$/;"	f	language:C	signature:(void* A, lArrayIter pos)
array_for_each	.\inc\array.h	/^extern void array_for_each(void* A, void (*visit)(void*, void*), void* arg);$/;"	p	language:C++	signature:(void* A, void (*visit)(void*, void*), void* arg)
array_for_each	.\src\array.c	/^void array_for_each(void* A, void (*visit)(void*, void*), void* arg)$/;"	f	language:C	signature:(void* A, void (*visit)(void*, void*), void* arg)
array_front	.\inc\array.h	/^extern void* array_front(void* A);$/;"	p	language:C++	signature:(void* A)
array_front	.\src\array.c	/^void* array_front(void* A)$/;"	f	language:C	signature:(void* A)
array_get	.\inc\array.h	/^extern void* array_get(void* A, int i);$/;"	p	language:C++	signature:(void* A, int i)
array_get	.\src\array.c	/^void* array_get(void* A, int i)$/;"	f	language:C	signature:(void* A, int i)
array_insert	.\inc\array.h	/^extern void* array_insert(void* A, lArrayIter pos, void* x);$/;"	p	language:C++	signature:(void* A, lArrayIter pos, void* x)
array_insert	.\src\array.c	/^void* array_insert(void* A, lArrayIter pos, void* x)$/;"	f	language:C	signature:(void* A, lArrayIter pos, void* x)
array_iter_next	.\inc\array.h	/^extern lArrayIter array_iter_next(lArrayIter iter);$/;"	p	language:C++	signature:(lArrayIter iter)
array_iter_next	.\src\array.c	/^lArrayIter array_iter_next(lArrayIter iter)$/;"	f	language:C	signature:(lArrayIter iter)
array_object_show	.\test\test_array.c	/^static void array_object_show(void* A)$/;"	f	language:C	file:	signature:(void* A)
array_pop_back	.\inc\array.h	/^extern void* array_pop_back(void* A);$/;"	p	language:C++	signature:(void* A)
array_pop_back	.\src\array.c	/^void* array_pop_back(void* A)$/;"	f	language:C	signature:(void* A)
array_push_back	.\inc\array.h	/^extern int array_push_back(void* A, void* x);$/;"	p	language:C++	signature:(void* A, void* x)
array_push_back	.\src\array.c	/^int array_push_back(void* A, void* x)$/;"	f	language:C	signature:(void* A, void* x)
array_release	.\inc\array.h	/^extern void array_release(void** A);$/;"	p	language:C++	signature:(void** A)
array_release	.\src\array.c	/^void array_release(void** A)$/;"	f	language:C	signature:(void** A)
array_remove	.\inc\array.h	/^extern void* array_remove(void* A, int i);$/;"	p	language:C++	signature:(void* A, int i)
array_remove	.\src\array.c	/^void* array_remove(void* A, int i)$/;"	f	language:C	signature:(void* A, int i)
array_resize	.\inc\array.h	/^extern void array_resize(void* A, int storage);$/;"	p	language:C++	signature:(void* A, int storage)
array_resize	.\src\array.c	/^void array_resize(void* A, int storage)$/;"	f	language:C	signature:(void* A, int storage)
array_set	.\inc\array.h	/^extern void* array_set(void* A, int i, void* x);$/;"	p	language:C++	signature:(void* A, int i, void* x)
array_set	.\src\array.c	/^void* array_set(void* A, int i, void* x)$/;"	f	language:C	signature:(void* A, int i, void* x)
array_size	.\inc\array.h	/^extern int array_size(void* A);$/;"	p	language:C++	signature:(void* A)
array_size	.\src\array.c	/^int array_size(void* A)$/;"	f	language:C	signature:(void* A)
assert	.\inc\assert.h	/^  extern void assert(int e);$/;"	p	language:C++	signature:(int e)
assert	.\inc\assert.h	32;"	d	language:C++
assert	.\inc\assert.h	34;"	d	language:C++
assert	.\inc\assert.h	38;"	d	language:C++
assert	.\src\assert.c	/^void (assert)(int e) $/;"	f	language:C	signature:(int e)
assert	.\src\except.c	92;"	d	language:C	file:
assert	.\src\except.c	95;"	d	language:C	file:
assert	.\src\except.c	97;"	d	language:C	file:
atom_int	.\inc\atom.h	/^extern const char* atom_int(long n);$/;"	p	language:C++	signature:(long n)
atom_int	.\src\atom.c	/^const char* atom_int(long n)$/;"	f	language:C	signature:(long n)
atom_length	.\inc\atom.h	/^extern int atom_length(const char* str);$/;"	p	language:C++	signature:(const char* str)
atom_length	.\src\atom.c	/^int atom_length(const char* str)$/;"	f	language:C	signature:(const char* str)
atom_new	.\inc\atom.h	/^extern const char* atom_new(const char* str, int len);$/;"	p	language:C++	signature:(const char* str, int len)
atom_new	.\src\atom.c	/^const char* atom_new(const char* str, int len)$/;"	f	language:C	signature:(const char* str, int len)
atom_string	.\inc\atom.h	/^extern const char* atom_string(const char* str);$/;"	p	language:C++	signature:(const char* str)
atom_string	.\src\atom.c	/^const char* atom_string(const char* str)$/;"	f	language:C	signature:(const char* str)
avail_beg	.\src\arena.c	/^  char* avail_beg;$/;"	m	language:C	struct:lArena	file:
avail_end	.\src\arena.c	/^  char* avail_end;$/;"	m	language:C	struct:lArena	file:
begin	.\src\array.c	/^  void** begin;$/;"	m	language:C	struct:lArray	file:
cb	.\test\test.c	/^  func_callback cb;$/;"	m	language:C	struct:TestFunc	file:
cmd	.\test\test.c	/^  char* cmd;$/;"	m	language:C	struct:TestFunc	file:
compare	.\src\set.c	/^  int (*compare)(const void*, const void*);$/;"	m	language:C	struct:lSet	file:
compare	.\src\table.c	/^  int (*compare)(const void* x, const void* y);$/;"	m	language:C	struct:lTable	file:
compare_def	.\src\set.c	/^static int compare_def(const void* x, const void* y)$/;"	f	language:C	file:	signature:(const void* x, const void* y)
compare_def	.\src\table.c	/^static int compare_def(const void* x, const void* y)$/;"	f	language:C	file:	signature:(const void* x, const void* y)
count	.\src\stack.c	/^  int count;$/;"	m	language:C	struct:lStack	file:
dalloc	.\src\mem_check.c	/^static struct lDescriptor* dalloc(void* ptr, long bytes, const char* file, int line)$/;"	f	language:C	file:	signature:(void* ptr, long bytes, const char* file, int line)
data	.\src\list.c	/^  void*             data;$/;"	m	language:C	struct:lListNode	file:
data	.\src\slist.c	/^  void*              data;$/;"	m	language:C	struct:lSlistNode	file:
edit	.\test\test_except.c	/^static void edit(int argc, char* argv[])$/;"	f	language:C	file:	signature:(int argc, char* argv[])
elements	.\src\array.c	/^  void** elements;$/;"	m	language:C	struct:lArray	file:
elements	.\src\sequence.c	/^  void** elements;$/;"	m	language:C	struct:lSequence	file:
end	.\src\array.c	/^  void** end;$/;"	m	language:C	struct:lArray	file:
end_of_storage	.\src\array.c	/^  void** end_of_storage;$/;"	m	language:C	struct:lArray	file:
env	.\inc\except.h	/^  jmp_buf              env;$/;"	m	language:C++	struct:lExceptFrame
error	.\inc\error.h	42;"	d	language:C++
except_init	.\inc\except.h	/^  extern void except_init(void);$/;"	p	language:C++	signature:(void)
except_init	.\src\except.c	/^void except_init(void)$/;"	f	language:C	signature:(void)
except_pop	.\inc\except.h	/^  extern void except_pop(void);$/;"	p	language:C++	signature:(void)
except_pop	.\src\except.c	/^void except_pop(void)$/;"	f	language:C	signature:(void)
except_push	.\inc\except.h	/^  extern void except_push(struct lExceptFrame* ef);$/;"	p	language:C++	signature:(struct lExceptFrame* ef)
except_push	.\src\except.c	/^void except_push(struct lExceptFrame* ef)$/;"	f	language:C	signature:(struct lExceptFrame* ef)
except_raise	.\inc\except.h	/^extern void except_raise(const struct lExcept* e, const char* file, int line);$/;"	p	language:C++	signature:(const struct lExcept* e, const char* file, int line)
except_raise	.\src\except.c	/^void except_raise(const struct lExcept* e, const char* file, int line)$/;"	f	language:C	signature:(const struct lExcept* e, const char* file, int line)
exception	.\inc\except.h	/^  struct lExcept*      exception;$/;"	m	language:C++	struct:lExceptFrame	typeref:struct:lExceptFrame::lExcept
file	.\inc\except.h	/^  const char*          file;$/;"	m	language:C++	struct:lExceptFrame
file	.\src\mem_check.c	/^  const char*         file;$/;"	m	language:C	struct:lDescriptor	file:
find	.\src\mem_check.c	/^static struct lDescriptor* find(const void* ptr)$/;"	f	language:C	file:	signature:(const void* ptr)
free	.\src\mem_check.c	/^  struct lDescriptor* free;$/;"	m	language:C	struct:lDescriptor	typeref:struct:lDescriptor::lDescriptor	file:
func_callback	.\test\test.c	/^typedef void (*func_callback)(void);$/;"	t	language:C	file:
g_errors	.\src\error.c	/^static const char* g_errors[] = {$/;"	v	language:C	file:
g_sBuckets	.\src\atom.c	/^static struct lAtom* g_sBuckets[2048];$/;"	v	language:C	typeref:struct:lAtom	file:
g_sFuncs	.\test\test.c	/^static struct TestFunc g_sFuncs[] = {$/;"	v	language:C	typeref:struct:TestFunc	file:
g_sScatter	.\src\atom.c	/^static unsigned long g_sScatter[] = {$/;"	v	language:C	file:
hash_value	.\src\set.c	/^  unsigned int (*hash_value)(const void*);$/;"	m	language:C	struct:lSet	file:
hash_value	.\src\table.c	/^  unsigned int (*hash_value)(const void* key);$/;"	m	language:C	struct:lTable	file:
hash_value_def	.\src\set.c	/^static unsigned hash_value_def(const void* x)$/;"	f	language:C	file:	signature:(const void* x)
hash_value_def	.\src\table.c	/^static unsigned int hash_value_def(const void* key)$/;"	f	language:C	file:	signature:(const void* key)
head	.\src\sequence.c	/^  int    head;$/;"	m	language:C	struct:lSequence	file:
head	.\src\slist.c	/^  struct lSlistNode* head;$/;"	m	language:C	struct:lSlist	typeref:struct:lSlist::lSlistNode	file:
head	.\src\stack.c	/^  struct lStackNode* head;$/;"	m	language:C	struct:lStack	typeref:struct:lStack::lStackNode	file:
id	.\test\test_arena.c	/^  int id;$/;"	m	language:C	struct:_TestArena	file:
id	.\test\test_memcheck.c	/^  int   id;$/;"	m	language:C	struct:_TestMemCheck	file:
id	.\test\test_memory.c	/^  int id;$/;"	m	language:C	struct:_TestMemory	file:
inline	.\inc\config.h	33;"	d	language:C++
key	.\src\table.c	/^  const void*        key;$/;"	m	language:C	struct:lTableNode	file:
lAlign	.\src\arena.c	/^union lAlign {$/;"	u	language:C	file:
lAlign	.\src\mem_check.c	/^union lAlign {$/;"	u	language:C	file:
lArena	.\src\arena.c	/^struct lArena {$/;"	s	language:C	file:
lArray	.\src\array.c	/^struct lArray {$/;"	s	language:C	file:
lArrayIter	.\inc\array.h	/^typedef void** lArrayIter;$/;"	t	language:C++
lAtom	.\src\atom.c	/^struct lAtom {$/;"	s	language:C	file:
lDescriptor	.\src\mem_check.c	/^struct lDescriptor {$/;"	s	language:C	file:
lExcept	.\inc\except.h	/^struct lExcept { const char* reason; };$/;"	s	language:C++
lExceptFrame	.\inc\except.h	/^struct lExceptFrame {$/;"	s	language:C++
lHeader	.\src\arena.c	/^union lHeader {$/;"	u	language:C	file:
lList	.\src\list.c	/^struct lList {$/;"	s	language:C	file:
lListIter	.\inc\list.h	/^typedef void** lListIter;$/;"	t	language:C++
lListNode	.\src\list.c	/^struct lListNode {$/;"	s	language:C	file:
lSequence	.\src\sequence.c	/^struct lSequence {$/;"	s	language:C	file:
lSet	.\src\set.c	/^struct lSet {$/;"	s	language:C	file:
lSetIter	.\inc\set.h	/^typedef void** lSetIter;$/;"	t	language:C++
lSetNode	.\src\set.c	/^struct lSetNode {$/;"	s	language:C	file:
lSlist	.\src\slist.c	/^struct lSlist {$/;"	s	language:C	file:
lSlistIter	.\inc\slist.h	/^typedef void** lSlistIter;$/;"	t	language:C++
lSlistNode	.\src\slist.c	/^struct lSlistNode {$/;"	s	language:C	file:
lStack	.\src\stack.c	/^struct lStack {$/;"	s	language:C	file:
lStackNode	.\src\stack.c	/^struct lStackNode {$/;"	s	language:C	file:
lTable	.\src\table.c	/^struct lTable {$/;"	s	language:C	file:
lTableIter	.\inc\table.h	/^typedef void** lTableIter;$/;"	t	language:C++
lTableNode	.\src\table.c	/^struct lTableNode {$/;"	s	language:C	file:
larena_createfailed	.\src\arena.c	/^const struct lExcept larena_createfailed = { "Arena creation failed" };$/;"	v	language:C	typeref:struct:lExcept
larena_failed	.\src\arena.c	/^const struct lExcept larena_failed       = { "Arena allocation failed" };$/;"	v	language:C	typeref:struct:lExcept
lassert_failed	.\src\assert.c	/^const struct lExcept lassert_failed = { "Assertion Failed" };$/;"	v	language:C	typeref:struct:lExcept
len	.\src\atom.c	/^  int   len;$/;"	m	language:C	struct:lAtom	file:
lexcept_index	.\src\except.c	/^int lexcept_index = -1;$/;"	v	language:C
lexcept_stack	.\src\except.c	/^struct lExceptFrame* lexcept_stack = NULL;$/;"	v	language:C	typeref:struct:lExceptFrame
lfreechunks	.\src\arena.c	/^static struct lArena* lfreechunks;$/;"	v	language:C	typeref:struct:lArena	file:
lfreecounts	.\src\arena.c	/^static int            lfreecounts;$/;"	v	language:C	file:
lfreelist	.\src\mem_check.c	/^static struct lDescriptor lfreelist = {&lfreelist};$/;"	v	language:C	typeref:struct:lDescriptor	file:
line	.\inc\except.h	/^  int                  line;$/;"	m	language:C++	struct:lExceptFrame
line	.\src\mem_check.c	/^  int                 line;$/;"	m	language:C	struct:lDescriptor	file:
list_back	.\inc\list.h	/^extern void* list_back(void* L);$/;"	p	language:C++	signature:(void* L)
list_back	.\src\list.c	/^void* list_back(void* L)$/;"	f	language:C	signature:(void* L)
list_begin	.\inc\list.h	/^extern lListIter list_begin(void* L);$/;"	p	language:C++	signature:(void* L)
list_begin	.\src\list.c	/^lListIter list_begin(void* L)$/;"	f	language:C	signature:(void* L)
list_clear	.\inc\list.h	/^extern void list_clear(void* L, void (*destroy)(void*));$/;"	p	language:C++	signature:(void* L, void (*destroy)(void*))
list_clear	.\src\list.c	/^void list_clear(void* L, void (*destroy)(void*))$/;"	f	language:C	signature:(void* L, void (*destroy)(void*))
list_create	.\inc\list.h	/^extern void* list_create(void);$/;"	p	language:C++	signature:(void)
list_create	.\src\list.c	/^void* list_create(void)$/;"	f	language:C	signature:(void)
list_element_destroy	.\test\test_list.c	/^static void list_element_destroy(void* x)$/;"	f	language:C	file:	signature:(void* x)
list_element_destroy_double	.\test\test_list.c	/^static void list_element_destroy_double(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
list_element_show_double	.\test\test_list.c	/^static void list_element_show_double(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
list_empty	.\inc\list.h	/^extern int list_empty(void* L);$/;"	p	language:C++	signature:(void* L)
list_empty	.\src\list.c	/^int list_empty(void* L)$/;"	f	language:C	signature:(void* L)
list_end	.\inc\list.h	/^extern lListIter list_end(void* L);$/;"	p	language:C++	signature:(void* L)
list_end	.\src\list.c	/^lListIter list_end(void* L)$/;"	f	language:C	signature:(void* L)
list_erase	.\inc\list.h	/^extern void* list_erase(void* L, lListIter pos);$/;"	p	language:C++	signature:(void* L, lListIter pos)
list_erase	.\src\list.c	/^void* list_erase(void* L, lListIter pos)$/;"	f	language:C	signature:(void* L, lListIter pos)
list_for_each	.\inc\list.h	/^extern void list_for_each(void* L, void (*visit)(void*, void*), void* arg);$/;"	p	language:C++	signature:(void* L, void (*visit)(void*, void*), void* arg)
list_for_each	.\src\list.c	/^void list_for_each(void* L, void (*visit)(void*, void*), void* arg)$/;"	f	language:C	signature:(void* L, void (*visit)(void*, void*), void* arg)
list_front	.\inc\list.h	/^extern void* list_front(void* L);$/;"	p	language:C++	signature:(void* L)
list_front	.\src\list.c	/^void* list_front(void* L)$/;"	f	language:C	signature:(void* L)
list_insert	.\inc\list.h	/^extern int list_insert(void* L, lListIter pos, void* x);$/;"	p	language:C++	signature:(void* L, lListIter pos, void* x)
list_insert	.\src\list.c	/^int list_insert(void* L, lListIter pos, void* x)$/;"	f	language:C	signature:(void* L, lListIter pos, void* x)
list_iter_next	.\inc\list.h	/^extern lListIter list_iter_next(lListIter iter);$/;"	p	language:C++	signature:(lListIter iter)
list_iter_next	.\src\list.c	/^lListIter list_iter_next(lListIter iter)$/;"	f	language:C	signature:(lListIter iter)
list_new_node	.\src\list.c	/^static inline struct lListNode* list_new_node(void* x)$/;"	f	language:C	file:	signature:(void* x)
list_object_show	.\test\test_list.c	/^static void list_object_show(void* L)$/;"	f	language:C	file:	signature:(void* L)
list_object_show_elements_double	.\test\test_list.c	/^static void list_object_show_elements_double(void* L)$/;"	f	language:C	file:	signature:(void* L)
list_pop_back	.\inc\list.h	/^extern void* list_pop_back(void* L);$/;"	p	language:C++	signature:(void* L)
list_pop_back	.\src\list.c	/^void* list_pop_back(void* L)$/;"	f	language:C	signature:(void* L)
list_pop_front	.\inc\list.h	/^extern void* list_pop_front(void* L);$/;"	p	language:C++	signature:(void* L)
list_pop_front	.\src\list.c	/^void* list_pop_front(void* L)$/;"	f	language:C	signature:(void* L)
list_push_back	.\inc\list.h	/^extern int list_push_back(void* L, void* x);$/;"	p	language:C++	signature:(void* L, void* x)
list_push_back	.\src\list.c	/^int list_push_back(void* L, void* x)$/;"	f	language:C	signature:(void* L, void* x)
list_push_front	.\inc\list.h	/^extern int list_push_front(void* L, void* x);$/;"	p	language:C++	signature:(void* L, void* x)
list_push_front	.\src\list.c	/^int list_push_front(void* L, void* x)$/;"	f	language:C	signature:(void* L, void* x)
list_release	.\inc\list.h	/^extern void list_release(void** L);$/;"	p	language:C++	signature:(void** L)
list_release	.\src\list.c	/^void list_release(void** L)$/;"	f	language:C	signature:(void** L)
list_size	.\inc\list.h	/^extern int list_size(void* L);$/;"	p	language:C++	signature:(void* L)
list_size	.\src\list.c	/^int list_size(void* L)$/;"	f	language:C	signature:(void* L)
lmemcheck_failed	.\src\mem_check.c	/^const struct lExcept lmemcheck_failed = { "Memory check failed" };$/;"	v	language:C	typeref:struct:lExcept
lmemory_failed	.\src\memory.c	/^const struct lExcept lmemory_failed = { "Allocation Failed" };$/;"	v	language:C	typeref:struct:lExcept
main	.\main.c	/^main(int argc, char* argv[], char* envp[])$/;"	f	language:C	signature:(int argc, char* argv[], char* envp[])
mem_alloc	.\inc\mem_check.h	/^extern void* mem_alloc(long bytes, const char* file, int line);$/;"	p	language:C++	signature:(long bytes, const char* file, int line)
mem_alloc	.\src\mem_check.c	/^void* mem_alloc(long bytes, const char* file, int line)$/;"	f	language:C	signature:(long bytes, const char* file, int line)
mem_calloc	.\inc\mem_check.h	/^extern void* mem_calloc(long count, long elem_bytes, const char* file, int line);$/;"	p	language:C++	signature:(long count, long elem_bytes, const char* file, int line)
mem_calloc	.\src\mem_check.c	/^void* mem_calloc(long count, long elem_bytes, const char* file, int line)$/;"	f	language:C	signature:(long count, long elem_bytes, const char* file, int line)
mem_free	.\inc\mem_check.h	/^extern void mem_free(void* ptr, const char* file, int line);$/;"	p	language:C++	signature:(void* ptr, const char* file, int line)
mem_free	.\src\mem_check.c	/^void mem_free(void* ptr, const char* file, int line)$/;"	f	language:C	signature:(void* ptr, const char* file, int line)
mem_realloc	.\inc\mem_check.h	/^extern void* mem_realloc(void* ptr, long bytes, const char* file, int line);$/;"	p	language:C++	signature:(void* ptr, long bytes, const char* file, int line)
mem_realloc	.\src\mem_check.c	/^void* mem_realloc(void* ptr, long bytes, const char* file, int line)$/;"	f	language:C	signature:(void* ptr, long bytes, const char* file, int line)
member	.\src\set.c	/^  const void*      member;$/;"	m	language:C	struct:lSetNode	file:
memory_alloc	.\inc\memory.h	/^extern void* memory_alloc(long bytes, const char* file, int line);$/;"	p	language:C++	signature:(long bytes, const char* file, int line)
memory_alloc	.\src\memory.c	/^void* memory_alloc(long bytes, const char* file, int line)$/;"	f	language:C	signature:(long bytes, const char* file, int line)
memory_calloc	.\inc\memory.h	/^extern void* memory_calloc(long count, long elem_bytes, const char* file, int line);$/;"	p	language:C++	signature:(long count, long elem_bytes, const char* file, int line)
memory_calloc	.\src\memory.c	/^void* memory_calloc(long count, long elem_bytes, const char* file, int line)$/;"	f	language:C	signature:(long count, long elem_bytes, const char* file, int line)
memory_free	.\inc\memory.h	/^extern void memory_free(void* ptr, const char* file, int line);$/;"	p	language:C++	signature:(void* ptr, const char* file, int line)
memory_free	.\src\memory.c	/^void memory_free(void* ptr, const char* file, int line)$/;"	f	language:C	signature:(void* ptr, const char* file, int line)
memory_realloc	.\inc\memory.h	/^extern void* memory_realloc(void* ptr, long bytes, const char* file, int line);$/;"	p	language:C++	signature:(void* ptr, long bytes, const char* file, int line)
memory_realloc	.\src\memory.c	/^void* memory_realloc(void* ptr, long bytes, const char* file, int line)$/;"	f	language:C	signature:(void* ptr, long bytes, const char* file, int line)
name	.\test\test_arena.c	/^  char name[32];$/;"	m	language:C	struct:_TestArena	file:
name	.\test\test_memcheck.c	/^  char  name[32];$/;"	m	language:C	struct:_TestMemCheck	file:
name	.\test\test_memory.c	/^  char name[32];$/;"	m	language:C	struct:_TestMemory	file:
next	.\src\atom.c	/^  struct lAtom* next;$/;"	m	language:C	struct:lAtom	typeref:struct:lAtom::lAtom	file:
next	.\src\list.c	/^  struct lListNode* next;$/;"	m	language:C	struct:lListNode	typeref:struct:lListNode::lListNode	file:
next	.\src\mem_check.c	/^  struct lDescriptor* next;$/;"	m	language:C	struct:lDescriptor	typeref:struct:lDescriptor::lDescriptor	file:
next	.\src\set.c	/^  struct lSetNode* next;$/;"	m	language:C	struct:lSetNode	typeref:struct:lSetNode::lSetNode	file:
next	.\src\slist.c	/^  struct lSlistNode* next;$/;"	m	language:C	struct:lSlistNode	typeref:struct:lSlistNode::lSlistNode	file:
next	.\src\stack.c	/^  struct lStackNode* next;$/;"	m	language:C	struct:lStackNode	typeref:struct:lStackNode::lStackNode	file:
next	.\src\table.c	/^  struct lTableNode* next;$/;"	m	language:C	struct:lTableNode	typeref:struct:lTableNode::lTableNode	file:
node	.\src\list.c	/^  struct lListNode node;$/;"	m	language:C	struct:lList	typeref:struct:lList::lListNode	file:
node	.\src\set.c	/^  struct lSetNode   node;$/;"	m	language:C	struct:lSet	typeref:struct:lSet::lSetNode	file:
node	.\src\table.c	/^  struct lTableNode   node;$/;"	m	language:C	struct:lTable	typeref:struct:lTable::lTableNode	file:
pad	.\src\arena.c	/^  char pad[MAXALIGN];$/;"	m	language:C	union:lAlign	file:
pad	.\src\mem_check.c	/^  char    pad[MAXALIGN];$/;"	m	language:C	union:lAlign	file:
prev	.\inc\except.h	/^  struct lExceptFrame* prev;$/;"	m	language:C++	struct:lExceptFrame	typeref:struct:lExceptFrame::lExceptFrame
prev	.\src\arena.c	/^  struct lArena* prev;$/;"	m	language:C	struct:lArena	typeref:struct:lArena::lArena	file:
prev	.\src\list.c	/^  struct lListNode* prev;$/;"	m	language:C	struct:lListNode	typeref:struct:lListNode::lListNode	file:
prev	.\src\set.c	/^  struct lSetNode* prev;$/;"	m	language:C	struct:lSetNode	typeref:struct:lSetNode::lSetNode	file:
prev	.\src\table.c	/^  struct lTableNode* prev;$/;"	m	language:C	struct:lTableNode	typeref:struct:lTableNode::lTableNode	file:
ptr	.\src\mem_check.c	/^  const void*         ptr;$/;"	m	language:C	struct:lDescriptor	file:
reason	.\inc\except.h	/^struct lExcept { const char* reason; };$/;"	m	language:C++	struct:lExcept
s_lhashtable	.\src\mem_check.c	/^static struct lDescriptor* s_lhashtable[LHASHTABLE_LEN_DEF];$/;"	v	language:C	typeref:struct:lDescriptor	file:
sequence_back	.\inc\sequence.h	/^extern void* sequence_back(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_back	.\src\sequence.c	/^void* sequence_back(void* P)$/;"	f	language:C	signature:(void* P)
sequence_clear	.\inc\sequence.h	/^extern void sequence_clear(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_clear	.\src\sequence.c	/^void sequence_clear(void* S)$/;"	f	language:C	signature:(void* S)
sequence_create	.\inc\sequence.h	/^extern void* sequence_create(int storage);$/;"	p	language:C++	signature:(int storage)
sequence_create	.\src\sequence.c	/^void* sequence_create(int storage)$/;"	f	language:C	signature:(int storage)
sequence_create_by	.\inc\sequence.h	/^extern void* sequence_create_by(void* x, ...);$/;"	p	language:C++	signature:(void* x, ...)
sequence_create_by	.\src\sequence.c	/^void* sequence_create_by(void* x, ...)$/;"	f	language:C	signature:(void* x, ...)
sequence_element_destroy	.\test\test_sequence.c	/^static void sequence_element_destroy(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
sequence_element_display	.\test\test_sequence.c	/^static void sequence_element_display(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
sequence_empty	.\inc\sequence.h	/^extern int sequence_empty(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_empty	.\src\sequence.c	/^int sequence_empty(void* S)$/;"	f	language:C	signature:(void* S)
sequence_for_each	.\inc\sequence.h	/^extern void sequence_for_each(void* S, void (*visit)(void*, void*), void* arg);$/;"	p	language:C++	signature:(void* S, void (*visit)(void*, void*), void* arg)
sequence_for_each	.\src\sequence.c	/^void sequence_for_each(void* P, void (*visit)(void*, void*), void* arg)$/;"	f	language:C	signature:(void* P, void (*visit)(void*, void*), void* arg)
sequence_front	.\inc\sequence.h	/^extern void* sequence_front(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_front	.\src\sequence.c	/^void* sequence_front(void* P)$/;"	f	language:C	signature:(void* P)
sequence_get	.\inc\sequence.h	/^extern void* sequence_get(void* S, int i);$/;"	p	language:C++	signature:(void* S, int i)
sequence_get	.\src\sequence.c	/^void* sequence_get(void* P, int i)$/;"	f	language:C	signature:(void* P, int i)
sequence_grow	.\src\sequence.c	/^static void sequence_grow(struct lSequence* S)$/;"	f	language:C	file:	signature:(struct lSequence* S)
sequence_object_show	.\test\test_sequence.c	/^static void sequence_object_show(void* S)$/;"	f	language:C	file:	signature:(void* S)
sequence_pop_back	.\inc\sequence.h	/^extern void* sequence_pop_back(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_pop_back	.\src\sequence.c	/^void* sequence_pop_back(void* P)$/;"	f	language:C	signature:(void* P)
sequence_pop_front	.\inc\sequence.h	/^extern void* sequence_pop_front(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_pop_front	.\src\sequence.c	/^void* sequence_pop_front(void* P)$/;"	f	language:C	signature:(void* P)
sequence_push_back	.\inc\sequence.h	/^extern void* sequence_push_back(void* S, void* x);$/;"	p	language:C++	signature:(void* S, void* x)
sequence_push_back	.\src\sequence.c	/^void* sequence_push_back(void* S, void* x)$/;"	f	language:C	signature:(void* S, void* x)
sequence_push_front	.\inc\sequence.h	/^extern void* sequence_push_front(void* S, void* x);$/;"	p	language:C++	signature:(void* S, void* x)
sequence_push_front	.\src\sequence.c	/^void* sequence_push_front(void* S, void* x)$/;"	f	language:C	signature:(void* S, void* x)
sequence_release	.\inc\sequence.h	/^extern void sequence_release(void** S);$/;"	p	language:C++	signature:(void** S)
sequence_release	.\src\sequence.c	/^void sequence_release(void** S)$/;"	f	language:C	signature:(void** S)
sequence_set	.\inc\sequence.h	/^extern void* sequence_set(void* S, int i, void* x);$/;"	p	language:C++	signature:(void* S, int i, void* x)
sequence_set	.\src\sequence.c	/^void* sequence_set(void* P, int i, void* x)$/;"	f	language:C	signature:(void* P, int i, void* x)
sequence_size	.\inc\sequence.h	/^extern int sequence_size(void* S);$/;"	p	language:C++	signature:(void* S)
sequence_size	.\src\sequence.c	/^int sequence_size(void* S)$/;"	f	language:C	signature:(void* S)
set_begin	.\inc\set.h	/^extern lSetIter set_begin(void* S);$/;"	p	language:C++	signature:(void* S)
set_begin	.\src\set.c	/^lSetIter set_begin(void* S)$/;"	f	language:C	signature:(void* S)
set_clear	.\inc\set.h	/^extern void set_clear(void* S);$/;"	p	language:C++	signature:(void* S)
set_clear	.\src\set.c	/^void set_clear(void* S)$/;"	f	language:C	signature:(void* S)
set_copy	.\src\set.c	/^static struct lSet* set_copy(struct lSet* S, int count)$/;"	f	language:C	file:	signature:(struct lSet* S, int count)
set_create	.\inc\set.h	/^extern void* set_create(int count, $/;"	p	language:C++	signature:(int count, int (*compare)(const void*, const void*), unsigned int (*hash_value)(const void*))
set_create	.\src\set.c	/^void* set_create(int count, $/;"	f	language:C	signature:(int count, int (*compare)(const void*, const void*), unsigned int (*hash_value)(const void*))
set_diff	.\inc\set.h	/^extern void* set_diff(void* S, void* T);$/;"	p	language:C++	signature:(void* S, void* T)
set_diff	.\src\set.c	/^void* set_diff(void* S, void* T)$/;"	f	language:C	signature:(void* S, void* T)
set_empty	.\inc\set.h	/^extern int set_empty(void* S);$/;"	p	language:C++	signature:(void* S)
set_empty	.\src\set.c	/^int set_empty(void* S)$/;"	f	language:C	signature:(void* S)
set_end	.\inc\set.h	/^extern lSetIter set_end(void* S);$/;"	p	language:C++	signature:(void* S)
set_end	.\src\set.c	/^lSetIter set_end(void* S)$/;"	f	language:C	signature:(void* S)
set_find	.\inc\set.h	/^extern int set_find(void* S, const void* member);$/;"	p	language:C++	signature:(void* S, const void* member)
set_find	.\src\set.c	/^int set_find(void* S, const void* member)$/;"	f	language:C	signature:(void* S, const void* member)
set_for_each	.\inc\set.h	/^extern void set_for_each(void* S, void (*visit)(const void*, void*), void* arg);$/;"	p	language:C++	signature:(void* S, void (*visit)(const void*, void*), void* arg)
set_for_each	.\src\set.c	/^void set_for_each(void* S, void (*visit)(const void*, void*), void* arg)$/;"	f	language:C	signature:(void* S, void (*visit)(const void*, void*), void* arg)
set_insert	.\inc\set.h	/^extern int set_insert(void* S, const void* member);$/;"	p	language:C++	signature:(void* S, const void* member)
set_insert	.\src\set.c	/^int set_insert(void* S, const void* member)$/;"	f	language:C	signature:(void* S, const void* member)
set_inter	.\inc\set.h	/^extern void* set_inter(void* S, void* T);$/;"	p	language:C++	signature:(void* S, void* T)
set_inter	.\src\set.c	/^void* set_inter(void* S, void* T)$/;"	f	language:C	signature:(void* S, void* T)
set_iter_next	.\inc\set.h	/^extern lSetIter set_iter_next(lSetIter iter);$/;"	p	language:C++	signature:(lSetIter iter)
set_iter_next	.\src\set.c	/^lSetIter set_iter_next(lSetIter iter)$/;"	f	language:C	signature:(lSetIter iter)
set_member_destroy	.\test\test_set.c	/^static void set_member_destroy(const void* member, void* arg)$/;"	f	language:C	file:	signature:(const void* member, void* arg)
set_member_show_double	.\test\test_set.c	/^static void set_member_show_double(const void* member, void* arg)$/;"	f	language:C	file:	signature:(const void* member, void* arg)
set_minus	.\inc\set.h	/^extern void* set_minus(void* S, void* T);$/;"	p	language:C++	signature:(void* S, void* T)
set_minus	.\src\set.c	/^void* set_minus(void* S, void* T)$/;"	f	language:C	signature:(void* S, void* T)
set_object	.\test\test_set.c	/^static void set_object(void* S)$/;"	f	language:C	file:	signature:(void* S)
set_release	.\inc\set.h	/^extern void set_release(void** S);$/;"	p	language:C++	signature:(void** S)
set_release	.\src\set.c	/^void set_release(void** S)$/;"	f	language:C	signature:(void** S)
set_remove	.\inc\set.h	/^extern void* set_remove(void* S, const void* member);$/;"	p	language:C++	signature:(void* S, const void* member)
set_remove	.\src\set.c	/^void* set_remove(void* S, const void* member)$/;"	f	language:C	signature:(void* S, const void* member)
set_size	.\inc\set.h	/^extern int set_size(void* S);$/;"	p	language:C++	signature:(void* S)
set_size	.\src\set.c	/^int set_size(void* S)$/;"	f	language:C	signature:(void* S)
set_union	.\inc\set.h	/^extern void* set_union(void* S, void* T);$/;"	p	language:C++	signature:(void* S, void* T)
set_union	.\src\set.c	/^void* set_union(void* S, void* T)$/;"	f	language:C	signature:(void* S, void* T)
sets	.\src\set.c	/^  struct lSetNode** sets;$/;"	m	language:C	struct:lSet	typeref:struct:lSet::lSetNode	file:
size	.\src\list.c	/^  int              size;$/;"	m	language:C	struct:lList	file:
size	.\src\mem_check.c	/^  long                size;$/;"	m	language:C	struct:lDescriptor	file:
size	.\src\sequence.c	/^  int    size;$/;"	m	language:C	struct:lSequence	file:
size	.\src\set.c	/^  int size;$/;"	m	language:C	struct:lSet	file:
size	.\src\slist.c	/^  int                size;$/;"	m	language:C	struct:lSlist	file:
size	.\src\table.c	/^  int size;$/;"	m	language:C	struct:lTable	file:
slist_back	.\inc\slist.h	/^extern void* slist_back(void* L);$/;"	p	language:C++	signature:(void* L)
slist_back	.\src\slist.c	/^void* slist_back(void* L)$/;"	f	language:C	signature:(void* L)
slist_begin	.\inc\slist.h	/^extern lSlistIter slist_begin(void* L);$/;"	p	language:C++	signature:(void* L)
slist_begin	.\src\slist.c	/^lSlistIter slist_begin(void* L)$/;"	f	language:C	signature:(void* L)
slist_clear	.\inc\slist.h	/^extern void slist_clear(void* L, void (*destroy)(void*));$/;"	p	language:C++	signature:(void* L, void (*destroy)(void*))
slist_clear	.\src\slist.c	/^void slist_clear(void* L, void (*destroy)(void*))$/;"	f	language:C	signature:(void* L, void (*destroy)(void*))
slist_create	.\inc\slist.h	/^extern void* slist_create(void);$/;"	p	language:C++	signature:(void)
slist_create	.\src\slist.c	/^void* slist_create(void)$/;"	f	language:C	signature:(void)
slist_element_destory	.\test\test_slist.c	/^static void slist_element_destory(void* x)$/;"	f	language:C	file:	signature:(void* x)
slist_element_destory_double	.\test\test_slist.c	/^static void slist_element_destory_double(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
slist_element_show_double	.\test\test_slist.c	/^static void slist_element_show_double(void* x, void* arg)$/;"	f	language:C	file:	signature:(void* x, void* arg)
slist_empty	.\inc\slist.h	/^extern int slist_empty(void* L);$/;"	p	language:C++	signature:(void* L)
slist_empty	.\src\slist.c	/^int slist_empty(void* L)$/;"	f	language:C	signature:(void* L)
slist_end	.\inc\slist.h	/^extern lSlistIter slist_end(void* L);$/;"	p	language:C++	signature:(void* L)
slist_end	.\src\slist.c	/^lSlistIter slist_end(void* L)$/;"	f	language:C	signature:(void* L)
slist_for_each	.\inc\slist.h	/^extern void slist_for_each(void* L, void (*visit)(void*, void*), void* arg);$/;"	p	language:C++	signature:(void* L, void (*visit)(void*, void*), void* arg)
slist_for_each	.\src\slist.c	/^void slist_for_each(void* L, void (*visit)(void*, void*), void* arg)$/;"	f	language:C	signature:(void* L, void (*visit)(void*, void*), void* arg)
slist_front	.\inc\slist.h	/^extern void* slist_front(void* L);$/;"	p	language:C++	signature:(void* L)
slist_front	.\src\slist.c	/^void* slist_front(void* L)$/;"	f	language:C	signature:(void* L)
slist_iter_next	.\inc\slist.h	/^extern lSlistIter slist_iter_next(lSlistIter iter);$/;"	p	language:C++	signature:(lSlistIter iter)
slist_iter_next	.\src\slist.c	/^lSlistIter slist_iter_next(lSlistIter iter)$/;"	f	language:C	signature:(lSlistIter iter)
slist_new_node	.\src\slist.c	/^static inline struct lSlistNode* slist_new_node(void* x)$/;"	f	language:C	file:	signature:(void* x)
slist_object_elements_show_double	.\test\test_slist.c	/^static void slist_object_elements_show_double(void* L)$/;"	f	language:C	file:	signature:(void* L)
slist_object_show	.\test\test_slist.c	/^static void slist_object_show(void* L)$/;"	f	language:C	file:	signature:(void* L)
slist_pop_front	.\inc\slist.h	/^extern void* slist_pop_front(void* L);$/;"	p	language:C++	signature:(void* L)
slist_pop_front	.\src\slist.c	/^void* slist_pop_front(void* L)$/;"	f	language:C	signature:(void* L)
slist_push_back	.\inc\slist.h	/^extern int slist_push_back(void* L, void* x);$/;"	p	language:C++	signature:(void* L, void* x)
slist_push_back	.\src\slist.c	/^int slist_push_back(void* L, void* x)$/;"	f	language:C	signature:(void* L, void* x)
slist_push_front	.\inc\slist.h	/^extern int slist_push_front(void* L, void* x);$/;"	p	language:C++	signature:(void* L, void* x)
slist_push_front	.\src\slist.c	/^int slist_push_front(void* L, void* x)$/;"	f	language:C	signature:(void* L, void* x)
slist_release	.\inc\slist.h	/^extern void slist_release(void** L);$/;"	p	language:C++	signature:(void** L)
slist_release	.\src\slist.c	/^void slist_release(void** L)$/;"	f	language:C	signature:(void** L)
slist_size	.\inc\slist.h	/^extern int slist_size(void* L);$/;"	p	language:C++	signature:(void* L)
slist_size	.\src\slist.c	/^int slist_size(void* L)$/;"	f	language:C	signature:(void* L)
stack_clear	.\src\stack.c	/^static void stack_clear(struct lStack* self)$/;"	f	language:C	file:	signature:(struct lStack* self)
stack_create	.\inc\stack.h	/^extern void* stack_create(void);$/;"	p	language:C++	signature:(void)
stack_create	.\src\stack.c	/^void* stack_create(void)$/;"	f	language:C	signature:(void)
stack_empty	.\inc\stack.h	/^extern int stack_empty(void* S);$/;"	p	language:C++	signature:(void* S)
stack_empty	.\src\stack.c	/^int stack_empty(void* S)$/;"	f	language:C	signature:(void* S)
stack_pop	.\inc\stack.h	/^extern void* stack_pop(void* S);$/;"	p	language:C++	signature:(void* S)
stack_pop	.\src\stack.c	/^void* stack_pop(void* S)$/;"	f	language:C	signature:(void* S)
stack_push	.\inc\stack.h	/^extern void stack_push(void* S, void* x);$/;"	p	language:C++	signature:(void* S, void* x)
stack_push	.\src\stack.c	/^void stack_push(void* S, void* x)$/;"	f	language:C	signature:(void* S, void* x)
stack_release	.\inc\stack.h	/^extern void stack_release(void** S);$/;"	p	language:C++	signature:(void** S)
stack_release	.\src\stack.c	/^void stack_release(void** S)$/;"	f	language:C	signature:(void** S)
storage	.\src\sequence.c	/^  int    storage;$/;"	m	language:C	struct:lSequence	file:
storage	.\src\set.c	/^  int storage;$/;"	m	language:C	struct:lSet	file:
storage	.\src\table.c	/^  int storage;$/;"	m	language:C	struct:lTable	file:
str	.\src\atom.c	/^  char* str;$/;"	m	language:C	struct:lAtom	file:
table_begin	.\inc\table.h	/^extern lTableIter table_begin(void* T);$/;"	p	language:C++	signature:(void* T)
table_begin	.\src\table.c	/^lTableIter table_begin(void* T)$/;"	f	language:C	signature:(void* T)
table_clear	.\inc\table.h	/^extern void table_clear(void* T);$/;"	p	language:C++	signature:(void* T)
table_clear	.\src\table.c	/^void table_clear(void* T)$/;"	f	language:C	signature:(void* T)
table_create	.\inc\table.h	/^extern void* table_create(int count, $/;"	p	language:C++	signature:(int count, int (*compare)(const void*, const void*), unsigned int (*hash_value)(const void*))
table_create	.\src\table.c	/^void* table_create(int count, $/;"	f	language:C	signature:(int count, int (*compare)(const void*, const void*), unsigned int (*hash_value)(const void*))
table_empty	.\inc\table.h	/^extern int table_empty(void* T);$/;"	p	language:C++	signature:(void* T)
table_empty	.\src\table.c	/^int table_empty(void* T)$/;"	f	language:C	signature:(void* T)
table_end	.\inc\table.h	/^extern lTableIter table_end(void* T);$/;"	p	language:C++	signature:(void* T)
table_end	.\src\table.c	/^lTableIter table_end(void* T)$/;"	f	language:C	signature:(void* T)
table_erase	.\src\table.c	/^static void table_erase(struct lTable* T, struct lTableNode* pos)$/;"	f	language:C	file:	signature:(struct lTable* T, struct lTableNode* pos)
table_find	.\inc\table.h	/^extern int table_find(void* T, const void* key);$/;"	p	language:C++	signature:(void* T, const void* key)
table_find	.\src\table.c	/^int table_find(void* T, const void* key)$/;"	f	language:C	signature:(void* T, const void* key)
table_for_each	.\inc\table.h	/^extern void table_for_each(void* T, void (*visit)(const void*, void*, void*), void* arg);$/;"	p	language:C++	signature:(void* T, void (*visit)(const void*, void*, void*), void* arg)
table_for_each	.\src\table.c	/^void table_for_each(void* T, void (*visit)(const void*, void*, void*), void* arg)$/;"	f	language:C	signature:(void* T, void (*visit)(const void*, void*, void*), void* arg)
table_get	.\inc\table.h	/^extern void* table_get(void* T, const void* key);$/;"	p	language:C++	signature:(void* T, const void* key)
table_get	.\src\table.c	/^void* table_get(void* T, const void* key)$/;"	f	language:C	signature:(void* T, const void* key)
table_insert	.\inc\table.h	/^extern int table_insert(void* T, const void* key, void* x);$/;"	p	language:C++	signature:(void* T, const void* key, void* x)
table_insert	.\src\table.c	/^int table_insert(void* T, const void* key, void* x)$/;"	f	language:C	signature:(void* T, const void* key, void* x)
table_iter_key	.\inc\table.h	/^extern const void* table_iter_key(lTableIter iter);$/;"	p	language:C++	signature:(lTableIter iter)
table_iter_key	.\src\table.c	/^const void* table_iter_key(lTableIter iter)$/;"	f	language:C	signature:(lTableIter iter)
table_iter_next	.\inc\table.h	/^extern lTableIter table_iter_next(lTableIter iter);$/;"	p	language:C++	signature:(lTableIter iter)
table_iter_next	.\src\table.c	/^lTableIter table_iter_next(lTableIter iter)$/;"	f	language:C	signature:(lTableIter iter)
table_iter_value	.\inc\table.h	/^extern void* table_iter_value(lTableIter iter);$/;"	p	language:C++	signature:(lTableIter iter)
table_iter_value	.\src\table.c	/^void* table_iter_value(lTableIter iter)$/;"	f	language:C	signature:(lTableIter iter)
table_key_value_destroy	.\test\test_table.c	/^static void table_key_value_destroy(const void* key, void* value, void* arg)$/;"	f	language:C	file:	signature:(const void* key, void* value, void* arg)
table_key_value_show	.\test\test_table.c	/^static void table_key_value_show(const void* key, void* value, void* arg)$/;"	f	language:C	file:	signature:(const void* key, void* value, void* arg)
table_object	.\test\test_table.c	/^static void table_object(void* T)$/;"	f	language:C	file:	signature:(void* T)
table_release	.\inc\table.h	/^extern void table_release(void** T);$/;"	p	language:C++	signature:(void** T)
table_release	.\src\table.c	/^void table_release(void** T)$/;"	f	language:C	signature:(void** T)
table_remove	.\inc\table.h	/^extern void* table_remove(void* T, const void* key);$/;"	p	language:C++	signature:(void* T, const void* key)
table_remove	.\src\table.c	/^void* table_remove(void* T, const void* key)$/;"	f	language:C	signature:(void* T, const void* key)
table_size	.\inc\table.h	/^extern int table_size(void* T);$/;"	p	language:C++	signature:(void* T)
table_size	.\src\table.c	/^int table_size(void* T)$/;"	f	language:C	signature:(void* T)
tables	.\src\table.c	/^  struct lTableNode** tables;$/;"	m	language:C	struct:lTable	typeref:struct:lTable::lTableNode	file:
tail	.\src\slist.c	/^  struct lSlistNode* tail;$/;"	m	language:C	struct:lSlist	typeref:struct:lSlist::lSlistNode	file:
test_arena	.\test\test.h	/^extern void test_arena(void);$/;"	p	language:C++	signature:(void)
test_arena	.\test\test_arena.c	/^void test_arena(void)$/;"	f	language:C	signature:(void)
test_arith	.\test\test.h	/^extern void test_arith(void);$/;"	p	language:C++	signature:(void)
test_arith	.\test\test_arith.c	/^void test_arith(void)$/;"	f	language:C	signature:(void)
test_array	.\test\test.h	/^extern void test_array(void);$/;"	p	language:C++	signature:(void)
test_array	.\test\test_array.c	/^void test_array(void)$/;"	f	language:C	signature:(void)
test_atom	.\test\test.h	/^extern void test_atom(void);$/;"	p	language:C++	signature:(void)
test_atom	.\test\test_atom.c	/^void test_atom(void)$/;"	f	language:C	signature:(void)
test_except	.\test\test.h	/^extern void test_except(void);$/;"	p	language:C++	signature:(void)
test_except	.\test\test_except.c	/^void test_except(void)$/;"	f	language:C	signature:(void)
test_list	.\test\test.h	/^extern void test_list(void);$/;"	p	language:C++	signature:(void)
test_list	.\test\test_list.c	/^void test_list(void)$/;"	f	language:C	signature:(void)
test_main	.\test\test.c	/^void test_main(const char* cmd)$/;"	f	language:C	signature:(const char* cmd)
test_main	.\test\test.h	/^extern void test_main(const char* cmd);$/;"	p	language:C++	signature:(const char* cmd)
test_memcheck	.\test\test.h	/^extern void test_memcheck(void);$/;"	p	language:C++	signature:(void)
test_memcheck	.\test\test_memcheck.c	/^void test_memcheck(void)$/;"	f	language:C	signature:(void)
test_memory	.\test\test.h	/^extern void test_memory(void);$/;"	p	language:C++	signature:(void)
test_memory	.\test\test_memory.c	/^void test_memory(void)$/;"	f	language:C	signature:(void)
test_sequence	.\test\test.h	/^extern void test_sequence(void);$/;"	p	language:C++	signature:(void)
test_sequence	.\test\test_sequence.c	/^void test_sequence(void)$/;"	f	language:C	signature:(void)
test_set	.\test\test.h	/^extern void test_set(void);$/;"	p	language:C++	signature:(void)
test_set	.\test\test_set.c	/^void test_set(void)$/;"	f	language:C	signature:(void)
test_slist	.\test\test.h	/^extern void test_slist(void);$/;"	p	language:C++	signature:(void)
test_slist	.\test\test_slist.c	/^void test_slist(void)$/;"	f	language:C	signature:(void)
test_stack	.\test\test.h	/^extern void test_stack(void);$/;"	p	language:C++	signature:(void)
test_stack	.\test\test_stack.c	/^void test_stack(void)$/;"	f	language:C	signature:(void)
test_table	.\test\test.h	/^extern void test_table(void);$/;"	p	language:C++	signature:(void)
test_table	.\test\test_table.c	/^void test_table(void)$/;"	f	language:C	signature:(void)
test_unknown	.\test\test.c	/^static void test_unknown(void)$/;"	f	language:C	file:	signature:(void)
timestamp	.\src\set.c	/^  unsigned int timestamp;$/;"	m	language:C	struct:lSet	file:
timestamp	.\src\table.c	/^  unsigned int timestamp;$/;"	m	language:C	struct:lTable	file:
value	.\src\table.c	/^  void*              value;$/;"	m	language:C	struct:lTableNode	file:
x	.\src\stack.c	/^  void* x;$/;"	m	language:C	struct:lStackNode	file:
