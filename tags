!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLOC	.\inc\memory.h	13;"	d	language:C++
CALLOC	.\inc\memory.h	14;"	d	language:C++
COUNTOF	.\test\test.c	34;"	d	language:C	file:
ELSE	.\inc\except.h	108;"	d	language:C++
ELSE	.\inc\except.h	74;"	d	language:C++
END_TRY	.\inc\except.h	119;"	d	language:C++
END_TRY	.\inc\except.h	85;"	d	language:C++
EXCEPT	.\inc\except.h	103;"	d	language:C++
EXCEPT	.\inc\except.h	69;"	d	language:C++
EXCEPT_ENTERED	.\inc\except.h	/^  EXCEPT_ENTERED    = 0, $/;"	e	language:C++	enum:__anon1
EXCEPT_FINALIZED	.\inc\except.h	/^  EXCEPT_FINALIZED  = 3, $/;"	e	language:C++	enum:__anon1
EXCEPT_HANDLED	.\inc\except.h	/^  EXCEPT_HANDLED    = 2, $/;"	e	language:C++	enum:__anon1
EXCEPT_RAISED	.\inc\except.h	/^  EXCEPT_RAISED     = 1, $/;"	e	language:C++	enum:__anon1
ErrorCode	.\inc\error.h	/^enum ErrorCode {$/;"	g	language:C++
Error_DividendIsZero	.\inc\error.h	/^  Error_DividendIsZero  = 1, $/;"	e	language:C++	enum:ErrorCode
Error_Unknown	.\inc\error.h	/^  Error_Unknown         = 0, $/;"	e	language:C++	enum:ErrorCode
FINALLY	.\inc\except.h	113;"	d	language:C++
FINALLY	.\inc\except.h	79;"	d	language:C++
FREE	.\inc\memory.h	17;"	d	language:C++
IS_CLOSE2ZERO	.\src\arith.c	33;"	d	language:C	file:
NELEMS	.\src\atom.c	39;"	d	language:C	file:
NEW	.\inc\memory.h	15;"	d	language:C++
NEW0	.\inc\memory.h	16;"	d	language:C++
RAISE	.\inc\except.h	58;"	d	language:C++
RAISE	.\inc\except.h	93;"	d	language:C++
REALLOC	.\inc\memory.h	18;"	d	language:C++
RERAISE	.\inc\except.h	59;"	d	language:C++
RERAISE	.\inc\except.h	94;"	d	language:C++
RETURN	.\inc\except.h	60;"	d	language:C++
RETURN	.\inc\except.h	95;"	d	language:C++
TRY	.\inc\except.h	61;"	d	language:C++
TRY	.\inc\except.h	96;"	d	language:C++
TestFunc	.\test\test.c	/^struct TestFunc {$/;"	s	language:C	file:
TestMemory	.\test\test_memory.c	/^} TestMemory;$/;"	t	language:C	typeref:struct:_TestMemory	file:
_TestMemory	.\test\test_memory.c	/^typedef struct _TestMemory {$/;"	s	language:C	file:
__ARITH_HEADER_H__	.\inc\arith.h	30;"	d	language:C++
__ASSERT_HEADER_H__	.\inc\assert.h	30;"	d	language:C++
__ATOM_HEADER_H__	.\inc\atom.h	30;"	d	language:C++
__ERROR_HEADER_H__	.\inc\error.h	30;"	d	language:C++
__EXCEPT_HEADER_H__	.\inc\except.h	30;"	d	language:C++
__MEMORY_HEADER_H__	.\inc\memory.h	2;"	d	language:C++
__STACK_HEADER_H__	.\inc\stack.h	30;"	d	language:C++
__TEST_HEADER_H__	.\test\test.h	30;"	d	language:C++
_assert	.\src\except.c	/^  _CRTIMP __cdecl void _assert(void*, void*, unsigned int);$/;"	p	language:C	file:	signature:(void*, void*, unsigned int)
arith_ceiling	.\inc\arith.h	/^extern int arith_ceiling(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_ceiling	.\src\arith.c	/^int arith_ceiling(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_div	.\inc\arith.h	/^extern int arith_div(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_div	.\src\arith.c	/^int arith_div(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_floor	.\inc\arith.h	/^extern int arith_floor(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_floor	.\src\arith.c	/^int arith_floor(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_max	.\inc\arith.h	/^extern int arith_max(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_max	.\src\arith.c	/^int arith_max(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_min	.\inc\arith.h	/^extern int arith_min(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_min	.\src\arith.c	/^int arith_min(int x, int y)$/;"	f	language:C	signature:(int x, int y)
arith_mod	.\inc\arith.h	/^extern int arith_mod(int x, int y);$/;"	p	language:C++	signature:(int x, int y)
arith_mod	.\src\arith.c	/^int arith_mod(int x, int y)$/;"	f	language:C	signature:(int x, int y)
assert	.\inc\assert.h	/^  extern void assert(int e);$/;"	p	language:C++	signature:(int e)
assert	.\inc\assert.h	32;"	d	language:C++
assert	.\inc\assert.h	34;"	d	language:C++
assert	.\inc\assert.h	38;"	d	language:C++
assert	.\src\assert.c	/^void (assert)(int e) $/;"	f	language:C	signature:(int e)
assert	.\src\except.c	82;"	d	language:C	file:
assert	.\src\except.c	83;"	d	language:C	file:
atom_int	.\inc\atom.h	/^extern const char* atom_int(long n);$/;"	p	language:C++	signature:(long n)
atom_int	.\src\atom.c	/^const char* atom_int(long n)$/;"	f	language:C	signature:(long n)
atom_length	.\inc\atom.h	/^extern int atom_length(const char* str);$/;"	p	language:C++	signature:(const char* str)
atom_length	.\src\atom.c	/^int atom_length(const char* str)$/;"	f	language:C	signature:(const char* str)
atom_new	.\inc\atom.h	/^extern const char* atom_new(const char* str, int len);$/;"	p	language:C++	signature:(const char* str, int len)
atom_new	.\src\atom.c	/^const char* atom_new(const char* str, int len)$/;"	f	language:C	signature:(const char* str, int len)
atom_string	.\inc\atom.h	/^extern const char* atom_string(const char* str);$/;"	p	language:C++	signature:(const char* str)
atom_string	.\src\atom.c	/^const char* atom_string(const char* str)$/;"	f	language:C	signature:(const char* str)
cb	.\test\test.c	/^  func_callback cb;$/;"	m	language:C	struct:TestFunc	file:
cmd	.\test\test.c	/^  char* cmd;$/;"	m	language:C	struct:TestFunc	file:
count	.\src\stack.c	/^  int count;$/;"	m	language:C	struct:lStack	file:
edit	.\test\test_except.c	/^static void edit(int argc, char* argv[])$/;"	f	language:C	file:	signature:(int argc, char* argv[])
env	.\inc\except.h	/^  jmp_buf              env;$/;"	m	language:C++	struct:lExceptFrame
error	.\inc\error.h	/^extern void error(const char* file, const char* func, int line, int err_code);$/;"	p	language:C++	signature:(const char* file, const char* func, int line, int err_code)
error	.\src\error.c	/^void error(const char* file, const char* func, int line, int err_code)$/;"	f	language:C	signature:(const char* file, const char* func, int line, int err_code)
except_init	.\inc\except.h	/^  extern void except_init(void);$/;"	p	language:C++	signature:(void)
except_init	.\src\except.c	/^void except_init(void)$/;"	f	language:C	signature:(void)
except_pop	.\inc\except.h	/^  extern void except_pop(void);$/;"	p	language:C++	signature:(void)
except_pop	.\src\except.c	/^void except_pop(void)$/;"	f	language:C	signature:(void)
except_push	.\inc\except.h	/^  extern void except_push(struct lExceptFrame* ef);$/;"	p	language:C++	signature:(struct lExceptFrame* ef)
except_push	.\src\except.c	/^void except_push(struct lExceptFrame* ef)$/;"	f	language:C	signature:(struct lExceptFrame* ef)
except_raise	.\inc\except.h	/^extern void except_raise(const struct lExcept* e, const char* file, int line);$/;"	p	language:C++	signature:(const struct lExcept* e, const char* file, int line)
except_raise	.\src\except.c	/^void except_raise(const struct lExcept* e, const char* file, int line)$/;"	f	language:C	signature:(const struct lExcept* e, const char* file, int line)
exception	.\inc\except.h	/^  struct lExcept*      exception;$/;"	m	language:C++	struct:lExceptFrame	typeref:struct:lExceptFrame::lExcept
file	.\inc\except.h	/^  const char*          file;$/;"	m	language:C++	struct:lExceptFrame
func_callback	.\test\test.c	/^typedef void (*func_callback)(void);$/;"	t	language:C	file:
g_errors	.\src\error.c	/^static const char* g_errors[] = {$/;"	v	language:C	file:
g_sBuckets	.\src\atom.c	/^static struct lAtom* g_sBuckets[2048];$/;"	v	language:C	typeref:struct:lAtom	file:
g_sFuncs	.\test\test.c	/^static struct TestFunc g_sFuncs[] = {$/;"	v	language:C	typeref:struct:TestFunc	file:
g_sScatter	.\src\atom.c	/^static unsigned long g_sScatter[] = {$/;"	v	language:C	file:
head	.\src\stack.c	/^  struct lStackNode* head;$/;"	m	language:C	struct:lStack	typeref:struct:lStack::lStackNode	file:
id	.\test\test_memory.c	/^  int id;$/;"	m	language:C	struct:_TestMemory	file:
lAtom	.\src\atom.c	/^struct lAtom {$/;"	s	language:C	file:
lExcept	.\inc\except.h	/^struct lExcept { const char* reason; };$/;"	s	language:C++
lExceptFrame	.\inc\except.h	/^struct lExceptFrame {$/;"	s	language:C++
lStack	.\src\stack.c	/^struct lStack {$/;"	s	language:C	file:
lStackNode	.\src\stack.c	/^struct lStackNode {$/;"	s	language:C	file:
lassert_failed	.\src\assert.c	/^const struct lExcept lassert_failed = { "Assertion Failed" };$/;"	v	language:C	typeref:struct:lExcept
len	.\src\atom.c	/^  int   len;$/;"	m	language:C	struct:lAtom	file:
lexcept_index	.\src\except.c	/^int lexcept_index = -1;$/;"	v	language:C
lexcept_stack	.\src\except.c	/^struct lExceptFrame* lexcept_stack = NULL;$/;"	v	language:C	typeref:struct:lExceptFrame
line	.\inc\except.h	/^  int                  line;$/;"	m	language:C++	struct:lExceptFrame
lmemory_failed	.\src\memory.c	/^const struct lExcept lmemory_failed = { "Allocation Failed" };$/;"	v	language:C	typeref:struct:lExcept
main	.\main.c	/^main(int argc, char* argv[], char* envp[])$/;"	f	language:C	signature:(int argc, char* argv[], char* envp[])
memory_alloc	.\inc\memory.h	/^extern void* memory_alloc(long bytes, const char* file, int line);$/;"	p	language:C++	signature:(long bytes, const char* file, int line)
memory_alloc	.\src\memory.c	/^void* memory_alloc(long bytes, const char* file, int line)$/;"	f	language:C	signature:(long bytes, const char* file, int line)
memory_calloc	.\inc\memory.h	/^extern void* memory_calloc(long count, long elem_bytes, const char* file, int line);$/;"	p	language:C++	signature:(long count, long elem_bytes, const char* file, int line)
memory_calloc	.\src\memory.c	/^void* memory_calloc(long count, long elem_bytes, const char* file, int line)$/;"	f	language:C	signature:(long count, long elem_bytes, const char* file, int line)
memory_free	.\inc\memory.h	/^extern void memory_free(void* ptr, const char* file, int line);$/;"	p	language:C++	signature:(void* ptr, const char* file, int line)
memory_free	.\src\memory.c	/^void memory_free(void* ptr, const char* file, int line)$/;"	f	language:C	signature:(void* ptr, const char* file, int line)
memory_realloc	.\inc\memory.h	/^extern void* memory_realloc(void* ptr, long bytes, const char* file, int line);$/;"	p	language:C++	signature:(void* ptr, long bytes, const char* file, int line)
memory_realloc	.\src\memory.c	/^void* memory_realloc(void* ptr, long bytes, const char* file, int line)$/;"	f	language:C	signature:(void* ptr, long bytes, const char* file, int line)
name	.\test\test_memory.c	/^  char name[32];$/;"	m	language:C	struct:_TestMemory	file:
next	.\src\atom.c	/^  struct lAtom* next;$/;"	m	language:C	struct:lAtom	typeref:struct:lAtom::lAtom	file:
next	.\src\stack.c	/^  struct lStackNode* next;$/;"	m	language:C	struct:lStackNode	typeref:struct:lStackNode::lStackNode	file:
prev	.\inc\except.h	/^  struct lExceptFrame* prev;$/;"	m	language:C++	struct:lExceptFrame	typeref:struct:lExceptFrame::lExceptFrame
reason	.\inc\except.h	/^struct lExcept { const char* reason; };$/;"	m	language:C++	struct:lExcept
stack_clear	.\src\stack.c	/^static void stack_clear(struct lStack* self)$/;"	f	language:C	file:	signature:(struct lStack* self)
stack_empty	.\inc\stack.h	/^extern int stack_empty(int S);$/;"	p	language:C++	signature:(int S)
stack_empty	.\src\stack.c	/^int stack_empty(int S)$/;"	f	language:C	signature:(int S)
stack_free	.\inc\stack.h	/^extern void stack_free(int* S);$/;"	p	language:C++	signature:(int* S)
stack_free	.\src\stack.c	/^void stack_free(int* S)$/;"	f	language:C	signature:(int* S)
stack_new	.\inc\stack.h	/^extern int stack_new(void);$/;"	p	language:C++	signature:(void)
stack_new	.\src\stack.c	/^int stack_new(void)$/;"	f	language:C	signature:(void)
stack_pop	.\inc\stack.h	/^extern void* stack_pop(int S);$/;"	p	language:C++	signature:(int S)
stack_pop	.\src\stack.c	/^void* stack_pop(int S)$/;"	f	language:C	signature:(int S)
stack_push	.\inc\stack.h	/^extern void stack_push(int S, void* x);$/;"	p	language:C++	signature:(int S, void* x)
stack_push	.\src\stack.c	/^void stack_push(int S, void* x)$/;"	f	language:C	signature:(int S, void* x)
str	.\src\atom.c	/^  char* str;$/;"	m	language:C	struct:lAtom	file:
test_arith	.\test\test.h	/^extern void test_arith(void);$/;"	p	language:C++	signature:(void)
test_arith	.\test\test_arith.c	/^void test_arith(void)$/;"	f	language:C	signature:(void)
test_atom	.\test\test.h	/^extern void test_atom(void);$/;"	p	language:C++	signature:(void)
test_atom	.\test\test_atom.c	/^void test_atom(void)$/;"	f	language:C	signature:(void)
test_except	.\test\test.h	/^extern void test_except(void);$/;"	p	language:C++	signature:(void)
test_except	.\test\test_except.c	/^void test_except(void)$/;"	f	language:C	signature:(void)
test_main	.\test\test.c	/^void test_main(const char* cmd)$/;"	f	language:C	signature:(const char* cmd)
test_main	.\test\test.h	/^extern void test_main(const char* cmd);$/;"	p	language:C++	signature:(const char* cmd)
test_memory	.\test\test.h	/^extern void test_memory(void);$/;"	p	language:C++	signature:(void)
test_memory	.\test\test_memory.c	/^void test_memory(void)$/;"	f	language:C	signature:(void)
test_stack	.\test\test.h	/^extern void test_stack(void);$/;"	p	language:C++	signature:(void)
test_stack	.\test\test_stack.c	/^void test_stack(void)$/;"	f	language:C	signature:(void)
test_unknown	.\test\test.c	/^static void test_unknown(void)$/;"	f	language:C	file:	signature:(void)
x	.\src\stack.c	/^  void* x;$/;"	m	language:C	struct:lStackNode	file:
